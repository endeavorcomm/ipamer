<div class="row mt-4 width-main center">
  <h5 class="center-align">ASSIGN IP ADDRESS</h5>
  <form action="/addresses/assign" method="POST" class="col s12 ml-3 mr-3" id="assignAddressForm">
    <div class="tab">
      <div class="row">
        <div class="input-field col s2 offset-s4 ">
          <input type="number" name="addressCount" id="addressCount" data-length="4" value="1" required>
          <label for="addressCount">How Many IPs?</label>
        </div>
        <div class="input-field col s2">
          <select name="site" id="site">
            {{#each sites}}
              <option value="{{this.id}}">{{this.description}}</option>
            {{/each}}
          </select>
          <label for="site">Which Site?</label>
        </div>
      </div>
    </div>
    <div class="tab">
      <div class="row">
        <div class="input-field col s12 m2 offset-m5">
          <input type="text" class="autocomplete" name="customer" id="customer" data-length="30" value="{{selectedCustomer}}">
          <label for="address-customer">Customer</label>
        </div>
      </div>
    </div>
    <h5 class="hidden mt-4 mb-4" id="whileWait">Creating IPs...</h5>
    <div style="overflow:auto;">
      <div>
        <button class="btn" type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
        <button class="btn" type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
      </div>
    </div>

    <div style="text-align:center;margin-top:40px;">
      <span class="step"></span>
      <span class="step"></span>
    </div>
  </form>
</div>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // initialize select fields
    var selectEls = document.querySelectorAll('select')
    M.FormSelect.init(selectEls)

    // grab customer data from parameter passed into /addresses/assign from backend node.js routes/addresses.js for route.get('/assign',...)
    const customers = {{{customers}}}

    // initialize customer field autocomplete
    const customerAuto = document.getElementById('customer');
    M.Autocomplete.init(customerAuto, {
      data: customers
    });

    // initialize input limits
    $('input').characterCounter();
  });
  let currentTab = 0; // Current tab is set to be the first tab (0)
  showTab(currentTab); // Display the current tab

  function showTab(n) {
    // This function will display the specified tab of the form ...
    let x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    // ... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 1)) {
      document.getElementById("nextBtn").innerHTML = "Submit";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";
    }
    // ... and run a function that displays the correct step indicator:
    fixStepIndicator(n)
  }

  function nextPrev(n) {
    // This function will figure out which tab to display
    let x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    if (n == 1 && !validateForm()) return false;
    // TODO get IPs from static pool and site
    const site = document.getElementById('site').value

    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form... :
    if (currentTab >= x.length) {
      //...the form gets submitted:
      document.getElementById("assignAddressForm").submit();
      document.getElementById("whileWait").style.display = "block";
      return false;
    }
    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  function validateForm() {
    // This function deals with validation of the form fields
    let x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      if (y[i].value == "") {
        // add an "invalid" class to the field:
        y[i].className += " invalid";
        // and set the current valid status to false:
        valid = false;
      }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    let i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class to the current step:
    x[n].className += " active";
  }
</script>